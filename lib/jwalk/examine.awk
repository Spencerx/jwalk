# jwalk: a streaming JSON parser for Unix
# (c) Sam Stephenson / https://jwalk.sh

# jwalk/examine.awk provides an awk runtime environment for working with the
# output generated by jwalk/parse.awk. For each line of parser input,
# jwalk/examine.awk sets the following awk variables:
#
#     keys    an array of zero or more strings, representing the key path,
#             indexed forward starting at 1 and backward at -1
#     path    the key path as a string, with each key separated by a tab (FS)
#     key     the rightmost (i.e., last) key of the key path
#     type    the type of the value: one of "number", "string", "boolean",
#             "null", "array", or "object"
#     leaf    0/false when type is "array" or "object"; 1/true otherwise
#     value   (aliased as _) the string representation of the JSON value
#
# The special characters newline, tab, and backslash remain escaped in these
# variables' values, as they are in jwalk/parse.awk output. The unescape()
# function will replace escaped characters with their corresponding values.

BEGIN {
  FS = OFS = "\t"
}

{
  type = $(NF - 1)
  leaf = type != "array" && type != "object"

  if (leafonly && !leaf) {
    next
  }

  if (length(filter) > 0 && !path_matches(filter)) {
    next
  }

  if (examining) {
    examine()
  } else {
    print
  }
}

function examine() {
  load_path_keys()
  key = $(NF - 2)
  value = _ = $(NF)
}

function path_matches(filter) {
  load_path_keys()
  return match(path, filter)
}

function load_path_keys(i, k, v) {
  if (path_keys_source != $0) {
    path_keys_source = $0
    depth = NF - 2

    split("", keys)
    split("", path_offsets)
    path = ""

    for (i = 1; i <= depth; i++) {
      k = sprintf("%d", i)
      keys[k] = keys[sprintf("%d", -(depth - i + 1))] = v = $(i)
      path_offsets[k] = length(path)
      path = (path_offsets[k] ? path FS : path) v
    }
  }
}

function unescape(str) {
  if (str == 0 && length(str) == 0) {
    str = value
  }

  gsub(/\\n/, "\n", str)
  gsub(/\\t/, "\t", str)
  gsub(/\\\\/, "\\", str)

  return str
}
